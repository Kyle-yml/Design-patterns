#include "iostream"
#include "string"
using namespace std;

/*  建造者模式  */

/*
介绍：
	将复杂对象的构建和其表示分离，使得同样的构建过程可以创建不同的表示。
	“比如：我要建房子，房子的基本框架都一样，但是不同的建造商建造出来的房子是不一样”
	主要解决：一个复杂对象的创建工作，由各个部分的子对象用一定的算法构成；由于需求变化，这个复杂对象的各个部分经常面临变化，但将它们组合在一起的算法却相对稳定。
	缺点：1、产品必须有共同点，范围有限制。 2、如内部变化复杂，会有很多的建造类。
*/

/*建造者模式的结构*/
/*	1.产品：具体的产品对象（House）
/*	2.抽象建造者：创建一个产品对象的各个部件的指定接口（AbstractBuilder）
/*	3.具体建造者：对抽象建造者的接口具体实现（BuildA， BuildB）
/*	4.指挥者：来安排哪个具体建造者来实现、它主要作用是：隔离客户与对象的生产过程，并负责控制生产产品的过程。（Director）
/**/

//产品类House
class House
{
public:
	House()
	{
		strFloor = "";
		strWall = "";
	}
	void SetFloor(string Floor)
	{
		strFloor = Floor;
	}
	void SetWall(string Wall)
	{
		strWall = Wall;
	}
	//打印房子信息
	void PrintHouseInfo()
	{
		cout << "地板:" << strFloor << endl;
		cout << "墙:" << strWall << endl;
	}
private:
	string strFloor;
	string strWall;
};


//定义抽象建造者
class AbstractBuilder
{
public:
	AbstractBuilder()
	{
		house = new House();
	}
	//抽象方法
	virtual void buildFloor() = 0;
	virtual void buildWall() = 0;
	House *getHouse()
	{
		return house;
	}

public:
	House *house;
};

//具体建造者A
class BuildA : public AbstractBuilder
{
public:
	BuildA(){}

	void buildFloor()
	{
		house->SetFloor("A-Floor");
	}
	void buildWall()
	{
		house->SetWall("A-Wall");
	}
};

//具体建造者B
class BuildB : public AbstractBuilder
{
public:
	BuildB(){}

	void buildFloor()
	{
		house->SetFloor("B-Floor");
	}
	void buildWall()
	{
		house->SetWall("B-Wall");
	}
};

//定义指挥者
class Director
{
public:
	Director(){}
	//实例引入
	void SetBuilder(AbstractBuilder *pbuilder)
	{
		builder = pbuilder;
	}

	House *construct()
	{
		builder->buildFloor();
		builder->buildWall();
		//返回产品对象
		return builder->getHouse();
	}

public:
	AbstractBuilder *builder;
};


/*
int main()
{
	//指挥者
	Director *dir = new Director();
	//建造者
	AbstractBuilder *builder = NULL;
	//产品
	House *house;

	builder = new BuildA();
	dir->SetBuilder(builder);
	house = dir->construct();
	house->PrintHouseInfo();

	builder = new BuildB();
	dir->SetBuilder(builder);
	house = dir->construct();
	house->PrintHouseInfo();

	delete house;
	house = NULL;
	delete dir;
	delete builder;

	dir = NULL;
	builder = NULL;

	system("pause");
	return 1;
}
*/
